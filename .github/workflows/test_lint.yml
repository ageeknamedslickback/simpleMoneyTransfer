name: Test

on: [push]

env:
  DB_HOST: 127.0.0.1
  DB_PORT: 5432
  DB_NAME: postgres
  DB_USER: postgres
  DB_PASS: postgres
  PORT: 8080
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  AUTH0_GRANT_TYPE: ${{ secrets.AUTH0_GRANT_TYPE }}
  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
  AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
  AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}

jobs:
  golangci:
    strategy:
      matrix:
        go-version: [1.19.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  lint_and_test:
    needs: [golangci]
    strategy:
      matrix:
        go-version: [1.19.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 80
    services:
        postgres:
            image: postgres:13
            env:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres
                POSTGRES_DB: postgres
                POSTGRES_HOST_AUTH_METHOD: trust
                POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
            options: >-
                --health-cmd pg_isready
                --health-interval 10s
                --health-timeout 5s
                --health-retries 5
            ports:
                - 5432:5432
    steps:
      - uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install Go dependencies
        run: |
          go mod download
          go get github.com/axw/gocov/gocov
          go get github.com/ory/go-acc
          go install github.com/ory/go-acc
          go install github.com/axw/gocov/gocov

      - name: Run tests
        run: |
          go-acc -o coverage.txt ./...
          grep -v "generated.go" coverage.txt | grep -v "_gen.go" | grep -v "mocks.go" | grep -v "*mocks.go" | grep -v "mock.go" | grep -v "*mock.go" | grep -v "*resolvers*go" | grep -v "*.resolvers.go" | grep -v "server.go" > coverage.out
          go tool cover -html=coverage.out -o coverage.html
          gocov convert coverage.out > coverage.json
          gocov report coverage.json > coverage_report.txt
          tail coverage_report.txt
